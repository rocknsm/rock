---
# Everything that needs to satisfy dependencies should be run in this play
- hosts: all
  vars:
    rock_debug: "{{ lookup('env', 'DEBUG') }}"
    http_proxy: "{{ lookup('env','http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
  roles:
    - { role: sensor-common }

- hosts: all
  gather_facts: False
  vars:
    rock_debug: "{{ lookup('env', 'DEBUG') }}"
    http_proxy: "{{ lookup('env','http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
  roles:
    - role: stenographer
      when: with_stenographer | bool
      stenographer_monitor_interfaces: "{{rock_monifs}}"
    - role: docket
      when: with_docket | bool
      docket_install: offline
      docket_enable: "{{enable_docket | bool}}"

  tasks:
  - name: Apply override settings, if available
    include_vars: /etc/rocknsm/config.yml
    ignore_errors: true
    failed_when: false

  - name: Debug variables
    import_tasks: debug.yml
    when: rock_debug is defined and rock_debug

    #######################################################
    ############# Install/Remove Packages #################
    #######################################################
  - name: Install packages
    yum:
      name: "{{ item.pkg }}"
      state: "{{ item.state }}"
    when: (item.test is undefined) or (item.test)
    with_items:
      - { pkg: "{{ rocknsm_package_list }}", state: installed }

  - name: Install optional packages
    yum:
      name: "{{ item.pkg }}"
      state: "{{ item.state }}"
    when: (item.test is undefined) or (item.test)
    with_items:
    - { pkg: elasticsearch, test: "{{with_elasticsearch}}", state: installed }
    - { pkg: logstash, test: "{{with_logstash}}", state: installed }
    - { pkg: kibana, test: "{{with_kibana}}", state: installed }
    - { pkg: filebeat, test: "{{with_suricata or with_fsf}}", state: installed }
    - { pkg: nginx, test: "{{with_nginx}}", state: installed }
    - { pkg: python2-xkcdpass, test: "{{with_nginx}}", state: installed }
    - { pkg: bro, test: "{{with_bro}}", state: installed }
    - { pkg: bro-plugin-af_packet, test: "{{with_bro}}", state: installed }
    - { pkg: bro-plugin-kafka, test: "{{(with_bro and with_kafka)}}", state: installed }
    - { pkg: docket, test: "{{with_docket}}", state: installed }
    - { pkg: suricata, test: "{{with_suricata}}", state: installed }
    - { pkg: suricata-update, test: "{{with_suricata}}", state: installed}
    - { pkg: snort, test: "{{with_snort}}", state: installed }
    - { pkg: daq, test: "{{with_snort}}", state: installed }
    - { pkg: zookeeper, test: "{{with_zookeeper}}", state: installed }
    - { pkg: kafka, test: "{{with_kafka}}", state: installed }
    - { pkg: kafkacat, test: "{{with_kafka}}", state: installed }
    - { pkg: fsf, test: "{{with_fsf}}", state: installed }
    - { pkg: postfix, state: installed }

  - name: Ensure cache directory exists
    file:
      dest: "{{ rock_cache_dir }}"
      state: directory
      mode: 0755

  - name: Download Pulled Pork
    get_url:
      url: "{{ pulledpork_url }}"
      dest: "{{ rock_cache_dir }}/{{ pulledpork_filename }}"
      mode: 0644
    when: with_pulledpork and rock_online_install

  - name: Install Pulled Pork
    unarchive:
      src: "{{ rock_cache_dir }}/{{ pulledpork_filename }}"
      dest: /opt
      owner: root
      group: root
      creates: "/opt/pulledpork-{{ pulledpork_release }}"
      remote_src: yes
    when: with_pulledpork

    #######################################################
    ################ Configure firewall ###################
    #######################################################
  - name: Enable and start firewalld
    service:
      name: firewalld
      enabled: yes
      state: started

  - name: Configure firewalld
    firewalld:
      port: "{{ item[1].port }}"
      source: "{{ item[0] }}"
      permanent: yes
      state: enabled
      immediate: yes
    when: (item[1].test is undefined) or item[1].test
    with_nested:
      - "{{ rock_mgmt_nets }}"
      -
        - { port: "22/tcp" }
        - { port: "443/tcp",  test: "{{ with_kibana }}" }
        - { port: "8443/tcp", test: "{{ with_docket }}" }

    ######################################################
    ############## Configure GeoIP Databases #############
    ######################################################
  - name: Configure GeoIP Update
    copy: src=GeoIP.conf dest=/etc/GeoIP.conf

    # There's an issue w/ geoipupdate when env is empty
  - name: Update GeoIP
    shell: >
      if [ "x$HTTP_PROXY" == "x" ]; then
          unset HTTP_PROXY;
      fi
      if [ "x$http_proxy" == "x" ]; then
          unset http_proxy;
      fi
      if [ "x$HTTPS_PROXY" == "x" ]; then
          unset HTTPS_PROXY;
      fi
      if [ "x$https_proxy" == "x" ]; then
          unset https_proxy;
      fi
      /usr/bin/geoipupdate
    args:
      creates: /usr/share/GeoIP/GeoLiteASNum.dat
    register: result
    failed_when: (result.rc != 0) and (result.rc != 1)

  - name: Create GeoIP symlinks
    file:
      src: "/usr/share/GeoIP/{{ item.src }}"
      dest: "/usr/share/GeoIP/{{ item.dest }}"
      force: yes
      state: link
    with_items:
      - { src: 'GeoLiteCity.dat', dest: 'GeoIPCity.dat' }
      - { src: 'GeoLiteCountry.dat', dest: 'GeoIPCountry.dat' }
      - { src: 'GeoLiteASNum.dat', dest: 'GeoIPASNum.dat' }
      - { src: 'GeoLiteCityv6.dat', dest: 'GeoIPCityv6.dat' }

    ######################################################
    ################### Setup Zookeeper ##################
    ######################################################
  - name: Enable and start zookeeper
    service:
      name: zookeeper
      state: "{{ 'started' if enable_zookeeper else 'stopped' }}"
      enabled: "{{ enable_zookeeper }}"
    when: with_zookeeper

    ######################################################
    ##################### Setup Kafka ####################
    ######################################################
  - name: Create Kafka data dir
    file:
      path: "{{ kafka_data_dir }}"
      mode: 0755
      owner: "{{ kafka_user }}"
      group: "{{ kafka_group }}"
      state: directory
    when: with_kafka

  - name: Set kafka retention
    lineinfile:
      dest: "{{ kafka_config_path }}"
      regexp: "log.retention.hours="
      line:  "log.retention.hours={{ kafka_retention }}"
      state: present
    when: with_kafka

  - name: Set kafka data dir
    lineinfile:
      dest: "{{ kafka_config_path }}"
      regexp: "log.dirs="
      line: "log.dirs={{ kafka_data_dir }}"
    when: with_kafka

  - name: Enable and start kafka
    service:
      name: kafka
      state: "{{ 'started' if enable_kafka else 'stopped' }}"
      enabled: "{{ enable_kafka }}"
    when: with_kafka

    ######################################################
    ################# Setup Elasticsearch ################
    ######################################################
  - name: Create Elasticsearch directory
    file:
      path: "{{ es_data_dir }}"
      mode: 0755
      owner: "{{ es_user }}"
      group: "{{ es_group }}"
      state: directory
    when: with_elasticsearch

  - name: Setup elasticsearch config
    template:
      src: templates/elasticsearch.yml.j2
      dest: /etc/elasticsearch/elasticsearch.yml
      owner: root
      group: "{{ es_group }}"
      mode: 0640
    when: with_elasticsearch

  - name: Create elasticsearch systemd override dir
    file:
      path: /etc/systemd/system/elasticsearch.service.d
      owner: root
      group: root
      mode: 0755
      state: directory
    when: with_elasticsearch

  - name: Enable elasticsearch memlock in service override
    copy:
      content: "{{ es_memlock_override }}"
      dest: /etc/systemd/system/elasticsearch.service.d/override.conf
      mode: 0644
      owner: root
      group: root
    when: with_elasticsearch

  - name: Setup elasticsearch jvm options
    template:
      src: templates/es-jvm.options.j2
      dest: /etc/elasticsearch/jvm.options
      mode: 0640
      owner: root
      group: "{{ es_group }}"
    when: with_elasticsearch

  - name: Install ROCK Elasticsearch cleanup script
    template:
      src: templates/es_cleanup.sh.j2
      dest: /usr/local/bin/es_cleanup.sh
      mode: 0755
      owner: root
      group: root
    when: with_elasticsearch

  - name: Set elasticsearch cleanup cron job
    cron:
      name: "ES maintenance"
      cron_file: rocknsm_es_maintenance
      hour: 0
      minute: 1
      user: root
      job: /usr/local/bin/es_cleanup.sh > /dev/null 2>&1
    when: with_elasticsearch

  # TODO: This has to be started for now so that the configuration ca
  # occur. In the future, we can do this in stages and expect a "running config"
  # phase to execute. Which will allow an install phase, reboot, come up and
  # configure the services live. We're not there yet.
  - name: Enable and start Elasticsearch
    service:
      name: elasticsearch
      state: "started"
      enabled: "{{ enable_elasticsearch }}"
    when: with_elasticsearch
    notify:
      - es maintenance

  - name: Wait for Elasticsearch to become ready
    wait_for: host=localhost port=9200
    when: with_elasticsearch

    ######################################################
    ################### Setup Kibana #####################
    ######################################################
  # TODO: See note above on Elasticsearch
  - name: Enable and start Kibana
    service:
      name: kibana
      state: "started"
      enabled: "{{ enable_kibana }}"
    when: with_kibana

  - name: Configure Kibana templates
    uri:
      method: PUT
      url: http://localhost:9200/_template/kibana-config
      body: >
        { "order" : 0, "template" : ".kibana",
          "settings" :
            { "index.number_of_replicas" : "0",
              "index.number_of_shards" : "1" },
          "mappings" : { }, "aliases" : { } }
      body_format: json
      status_code: 200,201
    when: with_kibana

  - name: Add the kibanapw shell function
    copy:
      src: profile.d-kibanapw.sh
      dest: /etc/profile.d/kibanapw.sh
      mode: 0644
      owner: root
      group: root
    when: with_kibana

  - name: Set initial Kibana credentials
    shell: >
      export kibuser=$(getent passwd 1000 | awk -F: '{print $1}') && \
      export kibpw=$(xkcdpass -a rock) && \
      echo -e "U: ${kibuser}\nP: ${kibpw}" > /home/${kibuser}/KIBANA_CREDS.README && \
      printf "${kibuser}:$(echo ${kibpw} | openssl passwd -apr1 -stdin)\n" | \
      sudo tee -a /etc/nginx/htpasswd.users > /dev/null 2>&1
    args:
      creates: /etc/nginx/htpasswd.users
    when: with_kibana

    ######################################################
    ############## Setup RockNSM dataflow ################
    ######################################################

  - name: Download RockNSM Elastic configs
    get_url:
      url: "{{ rock_dashboards_url }}"
      dest: "{{ rock_cache_dir }}/{{ rock_dashboards_filename }}"
      mode: 0644
    when: (with_kibana or with_elasticsearch or with_logstash) and rock_online_install

  - name: Extract RockNSM Elastic configs
    unarchive:
      src: "{{ rock_cache_dir }}/{{ rock_dashboards_filename }}"
      dest: /opt/rocknsm
      owner: root
      group: root
      creates: "{{ rock_module_dir }}"
      remote_src: yes
    when: (with_kibana or with_elasticsearch or with_logstash)

    ############### Elasticsearch Mappings ####################
    # TODO customize mappings install per sensor features (i.e. bro, suricata, etc)...maybe
    # TODO: Fix `changed_when`
  - name: Blanket install/update Elasticsearch mappings
    command: ./import-index-templates.sh "{{ es_url }}"
    args:
      chdir: "{{ rock_module_dir }}/configuration/elasticsearch"
    changed_when: false
    when: with_elasticsearch

    ############### Logstash Config ####################
  - name: Install Bro-Kafka configuration for Logstash
    copy:
      src: "{{rock_module_dir}}/configuration/logstash/{{item}}"
      dest: "/etc/logstash/conf.d/{{item}}"
      mode: 0640
      owner: "{{ logstash_user }}"
      group: "{{ logstash_group }}"
      remote_src: "yes"
    when: with_logstash and with_bro and with_kafka
    notify: Restart Logstash
    with_items:
      - logstash-100-input-kafka-bro.conf
      - logstash-500-filter-bro.conf
      - logstash-999-output-es-bro.conf

  - name: Install Suricata-Kafka configuration for Logstash
    copy:
      src: "{{rock_module_dir}}/configuration/logstash/{{item}}"
      dest: "/etc/logstash/conf.d/{{item}}"
      mode: 0640
      owner: "{{ logstash_user }}"
      group: "{{ logstash_group }}"
      remote_src: "yes"
    when: with_logstash and with_suricata and with_kafka
    notify: Restart Logstash
    with_items:
      - logstash-100-input-kafka-suricata.conf
      - logstash-500-filter-suricata.conf
      - logstash-999-output-es-suricata.conf

  - name: Install FSF-Kafka configuration for Logstash
    copy:
      src: "{{rock_module_dir}}/configuration/logstash/{{item}}"
      dest: "/etc/logstash/conf.d/{{item}}"
      mode: 0640
      owner: "{{ logstash_user }}"
      group: "{{ logstash_group }}"
      remote_src: "yes"
    when: with_logstash and with_fsf and with_kafka
    notify: Restart Logstash
    with_items:
      - logstash-100-input-kafka-fsf.conf
      - logstash-500-filter-fsf.conf
      - logstash-999-output-es-fsf.conf

  - name: Install Parse Failure configuration for Logstash
    copy:
      src: "{{rock_module_dir}}/configuration/logstash/{{item}}"
      dest: "/etc/logstash/conf.d/{{item}}"
      mode: 0640
      owner: "{{ logstash_user }}"
      group: "{{ logstash_group }}"
      remote_src: "yes"
    when: with_logstash
    notify: Restart Logstash
    with_items:
      - logstash-998-filter-parsefailures.conf
      - logstash-999-output-es-parsefailures.conf

    ############### Kibana Config ####################
  - name: Blanket install/update Kibana saved objects
    command: ./import-saved-items.sh "{{ kibana_url }}"
    args:
      chdir: "{{rock_module_dir}}/configuration/kibana"
    changed_when: false
    # TODO: Fix this ^^
    when: with_kibana

  # - name: Get Kibana Bro index mapping
  #   uri:
  #     method: GET
  #     url: "{{ kibana_url }}/api/saved_objects/index-pattern?per_page=1000"
  #   when: with_kibana
  #   register:

    ######################################################
    ################### Setup Logstash ###################
    ######################################################

  # - name: Check for Parse Failure mapping template
  #   uri:
  #     method: "GET"
  #     url: http://localhost:9200/_template/failure_index
  #   failed_when: False
  #   register: failure_mapping
  #   when: (with_elasticsearch and with_logstash)
  #
  # - name: Load Parse Failure Elasticsearch mapping templates
  #   uri:
  #     method: PUT
  #     url: http://localhost:9200/_template/failure_index
  #     body: "{{ lookup('file', 'es-parse-failures-mappings.json')}}"
  #     body_format: json
  #   when: (with_elasticsearch and with_logstash) and failure_mapping.status == 404

  - name: Enable and start Logstash
    service:
      name: logstash
      state: "{{ 'started' if enable_logstash else 'stopped' }}"
      enabled: "{{ enable_logstash }}"
    when: with_logstash


    ######################################################
    ################### Setup Filebeat ###################
    ######################################################
  - name: Add Filebeat configuration file
    template:
      src: filebeat.yml.j2
      dest: /etc/filebeat/filebeat.yml
    notify: Restart Filebeat

  - name: Enable and start Filebeat
    service:
      name: filebeat
      state: "{{ 'started' if enable_filebeat else 'stopped' }}"
      enabled: "{{ enable_filebeat }}"
    when: with_filebeat

    #######################################################
    ###################### Setup Bro  #####################
    #######################################################
  - name: Create bro group
    group:
      name: "{{ bro_group }}"
      state: present
      system: yes
    when: with_bro

  - name: Create bro user and group
    user:
      name: "{{ bro_user }}"
      comment: "bro service account"
      createhome: no
      group: "{{ bro_group }}"
      home: /var/spool/bro
      shell: /sbin/nologin
      system: yes
      state: present
    when: with_bro

  - name: Create Bro directories
    file:
      path: "{{ item }}"
      mode: 0755
      owner: "{{ bro_user }}"
      group: "{{ bro_group }}"
      state: directory
    with_items:
      - "{{ bro_data_dir }}"
      - "{{ bro_data_dir }}/logs"
      - "{{ bro_data_dir }}/spool"
    when: with_bro

  - name: Create /opt/bro dir for wandering users
    file:
      dest: "/opt/bro"
      state: directory
    when: with_bro

  - name: Create note to wandering users
    copy:
      dest: "/opt/bro/README.md"
      content: |
        Hey! Where's my Bro?
        =========================

        RockNSM has aligned the Bro package to be inline with Fedora packaging
        guidelines in an effort to push the package upstream for maintenance.
        Fedora and EPEL have a great community and we believe others can benefit
        from our hard work.

        Here's where you can find your stuff:

        Bro configuration files
        -----------------------
        /opt/bro/etc -> /etc/bro

        Bro site scripts
        -----------------------
        /opt/bro/share/bro/site -> /usr/share/bro/site

        Bro logs and spool dirs (same as previous ROCK iterations)
        -----------------------
        /opt/bro/logs -> /data/bro/logs
        /opt/bro/spool -> /data/bro/spool
    when: with_bro

  - name: Create Bro node.cfg
    template:
      src: templates/bro-node.cfg.j2
      dest: "{{ bro_sysconfig_dir }}/node.cfg"
      mode: 0644
      owner: root
      group: root
    when: with_bro
    notify: reload bro

  - name: Create broctl.cfg
    template:
      src: templates/bro-broctl.cfg.j2
      dest: "{{ bro_sysconfig_dir }}/broctl.cfg"
      mode: 0644
      owner: root
      group: root
    when: with_bro
    notify: reload bro

  - name: Create bro networks.cfg
    copy:
      src: bro-networks.cfg
      dest: "{{ bro_sysconfig_dir }}/networks.cfg"
      mode: 0644
      owner: root
      group: root
    when: with_bro
    notify: reload bro

  - name: Add bro custom scripts dir
    file:
      path: "{{ bro_site_dir }}/scripts"
      owner: root
      group: root
      mode: 0755
      state: directory
    when: with_bro

  - name: Set permissions on broctl scripts dir
    file:
      path: "{{ bro_prefix }}/share/broctl/scripts"
      owner: "{{ bro_user }}"
      group: "{{ bro_user }}"
      mode: 0755
      state: directory
    when: with_bro

  - name: Add README to scripts dir
    copy:
      src: bro-scripts-readme.txt
      dest: "{{ bro_site_dir }}/scripts/README.txt"
      mode: 0644
      owner: root
      group: root
    when: with_bro

  - name: Checkout ROCK Bro scripts
    git:
      repo: "{{ bro_rockscripts_repo }}"
      dest: "{{ bro_site_dir }}/scripts/rock"
      version: "{{ bro_rockscripts_branch }}"
    when: with_bro and rock_online_install

  - name: Deploy offline ROCK Bro scripts
    unarchive:
      src: "{{ rock_cache_dir }}/{{ bro_rockscripts_filename }}"
      dest: "{{ bro_site_dir }}/scripts/"
      owner: root
      group: root
      creates: "{{ bro_site_dir }}/scripts/rock-scripts-{{ bro_rockscripts_branch | replace ('/', '-') }}"
      remote_src: yes
    when: with_bro and not rock_online_install

  - name: Symlink offline ROCK bro scripts
    file:
      src: "{{ bro_site_dir }}/scripts/rock-scripts-{{ bro_rockscripts_branch | replace ('/', '-') }}"
      dest: "{{ bro_site_dir }}/scripts/rock"
      state: link
      force: yes
    when: with_bro and not rock_online_install

  - name: Update owner for ROCK NSM Bro scripts
    file:
      path: "{{ bro_site_dir }}/scripts/rock"
      owner: "{{ bro_user }}"
      group: "{{ bro_group }}"
      state: directory
      recurse: yes
      follow: yes
    tags:
      - bro_scripts
    when: with_bro

  - name: Add ROCK scripts to local.bro
    lineinfile:
      dest: "{{ bro_site_dir }}/local.bro"
      line: "@load scripts/rock # ROCK NSM customizations"
      state: present
    when: with_bro

  - name: Enable Bro Kafka output to local.bro
    lineinfile:
      dest: "{{ bro_site_dir }}/local.bro"
      line: "@load scripts/rock/plugins/kafka"
      state: present
    when: with_bro and with_kafka

  - name: Add bro aliases
    copy:
      src: profile.d-bro.sh
      dest: /etc/profile.d/bro.sh
      mode: 0644
      owner: root
      group: root
    when: with_bro

  - name: Add broctl wrapper for admin use
    copy:
      src: broctl.sh
      dest: /usr/sbin/broctl
      mode: 0754
      owner: root
      group: root
    when: with_bro

  - name: Set bro capabilities
    capabilities:
      path: /usr/bin/bro
      capability: "{{ item }}"
      state: present
    with_items:
      - "cap_net_raw+eip"
      - "cap_net_admin+eip"
    when: with_bro

  - name: Set capstats capabilities
    capabilities:
      path: /usr/bin/capstats
      capability: "{{ item }}"
      state: present
    with_items:
      - "cap_net_raw+eip"
      - "cap_net_admin+eip"
    when: with_bro

  - name: Set broctl cron
    cron:
      name: "broctl maintenance"
      minute: "*/5"
      cron_file: rocknsm_broctl
      user: "{{ bro_user }}"
      job: "/usr/bin/broctl cron >/dev/null 2>&1"
    when: with_bro

  - name: Initialize bro scripts for workers
    command: /usr/bin/broctl install
    args:
      creates: "{{ bro_data_dir }}/spool/broctl-config.sh"
    become: yes
    become_user: "{{ bro_user }}"
    when: with_bro

  - name: Enable and start broctl
    service:
      name: bro
      enabled: "{{ enable_bro }}"
    when: with_bro
    notify: reload bro


    ######################################################
    ################## Setup Suricata ####################
    ######################################################
  - name: Create Suricata directories
    file:
      path: "{{ suricata_data_dir }}/"
      mode: 0755
      owner: "{{ suricata_user }}"
      group: "{{ suricata_group }}"
      state: directory
    when: with_suricata

  - name: Remove suricata sysconfig file
    file:
      path: /etc/sysconfig/suricata
      state: absent
    when: with_suricata

  - name: Install suricata service files
    copy:
      src: "suricata.service"
      dest: "/etc/systemd/system/suricata.service"
      mode: 0644
      owner: root
      group: root
    when: with_suricata

  - name: Setup suricata tmpfiles
    copy:
      src: "suricata.tmpfiles"
      dest: "/etc/tmpfiles.d/suricata.conf"
      mode: 0644
      owner: root
      group: root
    when: with_suricata

  - name: Install suricata overrides
    template:
      src: templates/suricata_overrides.yaml.j2
      dest: /etc/suricata/rocknsm-overrides.yaml
      mode: 0640
      owner: "root"
      group: "{{ suricata_group }}"
    when: with_suricata

  - name: Create IP reputation config dir
    file:
      path: /etc/suricata/rules/iplists
      state: directory
      owner: root
      group: root
      mode: 0755
    when: with_suricata

  - name: Create Suricata dirs for suricata-update
    file:
      path: "{{ suricata_var_dir }}/{{ item }}"
      state: directory
      owner: "{{ suricata_user }}"
      group: "{{ suricata_group }}"
      mode: 0755
      recurse: "yes"
    when: with_suricata
    with_items:
      - rules
      - update

  - name: Set suricata overrides include in main config
    lineinfile:
      dest: /etc/suricata/suricata.yaml
      line: "include: rocknsm-overrides.yaml"
      state: present
    when: with_suricata

  - name: Enable and start suricata
    service:
      name: suricata
      enabled: "{{ enable_suricata }}"
      state: "{{ 'started' if enable_suricata else 'stopped' }}"
    when: with_suricata

  - name: Configure logrotate for suricata logs
    template:
      src: templates/logrotate-suricata.conf.j2
      dest: /etc/logrotate.d/suricata.conf
      mode: 0644
      owner: root
      group: root
    when: with_suricata

    ######################################################
    ################# Setup PulledPork  ##################
    ######################################################
  - name: Create pulledpork directory symlink
    file:
      src: "/opt/pulledpork-{{ pulledpork_release }}"
      dest: "/opt/pulledpork"
      state: link
      force: yes
    when: with_pulledpork

  - name: Set pulledpork executable
    file:
      path: /opt/pulledpork/pulledpork.pl
      mode: 0755
      owner: root
      group: root
    when: with_pulledpork

  - name: Create pulledpork config dir
    file:
      path: /etc/pulledpork
      mode: 0755
      owner: root
      group: root
      state: directory
    when: with_pulledpork

  - name: Configure pulledpork
    template:
      src: templates/pulledpork.conf.j2
      dest: /etc/pulledpork/pulledpork.conf
      owner: root
      group: root
      mode: 0644
    when: with_pulledpork

  - name: Check stats of rules files
    stat:
      path: "{{ pulledpork_engine_basepath }}/rules/pulledpork.rules"
    register: rules_file
    when: with_pulledpork

  - name: Create initial pulledpork rules-related files
    file:
      path: "{{ pulledpork_engine_basepath }}/rules/pulledpork.rules"
      owner: root
      group: root
      mode: 0644
      state: touch
    when: with_pulledpork and not rules_file.stat.exists

  - name: Schedule pulledpork to run daily
    cron:
      name: "pulledpork update"
      cron_file: rocknsm_pulledpork
      user: root
      hour: "12"
      minute: "0"
      job: /opt/pulledpork/pulledpork.pl
        -c /etc/pulledpork/pulledpork.conf
        -l > /var/log/pulledpork.log 2>&1;
        {{ "/usr/bin/systemctl kill -s USR2 suricata;" if with_suricata else None }}
        {{ "/usr/bin/systemctl restart snortd;" if with_snort else None }}
    when: with_pulledpork

    #######################################################
    ######################## FSF ##########################
    #######################################################
  - name: Create FSF data dir
    file:
      path: "{{ fsf_data_dir }}"
      mode: 0755
      owner: "{{ fsf_user }}"
      group: "{{ fsf_group }}"
      state: directory
    when: with_fsf

  - name: Create FSF archive dir
    file:
      path: "{{ fsf_archive_dir }}"
      mode: 0755
      owner: "{{ fsf_user }}"
      group: "{{ fsf_group }}"
      state: directory
    when: with_fsf

  - name: Configure logrotate for FSF logs
    copy:
      src: logrotate-fsf.conf
      dest: /etc/logrotate.d/fsf.conf
      mode: 0644
      owner: root
      group: root
    when: with_fsf

  - name: Configure fsf-server
    template:
      src: templates/fsf-server-config.j2
      dest: /opt/fsf/fsf-server/conf/config.py
      owner: "{{ fsf_user }}"
      group: "{{ fsf_group }}"
      mode: 0644
    when: with_fsf

  - name: Configure fsf-client
    template:
      src: templates/fsf-client-config.j2
      dest: /opt/fsf/fsf-client/conf/config.py
      owner: "{{ fsf_user }}"
      group: "{{ fsf_group }}"
      mode: 0644
    when: with_fsf

  - name: Enable and start FSF
    service:
      name: fsf
      state: "{{ 'started' if enable_fsf else 'stopped' }}"
      enabled: "{{ enable_fsf }}"
    when: with_fsf

    ######################################################
    ################### Setup nginx ######################
    ######################################################
  - name: Install ROCK nginx configuration
    template:
      src: templates/nginx-rock.conf.j2
      dest: /etc/nginx/conf.d/rock.conf
      mode: 0644
      owner: root
      group: root
    when: with_nginx and with_kibana

  - name: Install nginx base configuration
    copy:
      src: nginx.conf
      dest: /etc/nginx/nginx.conf
      mode: 0644
      owner: root
      group: root
    when: with_nginx

  - name: Enable nginx to perform proxy connect
    seboolean:
      name: httpd_can_network_connect
      state: yes
      persistent: yes
    when: with_nginx and with_kibana

  - name: Generate sensor private key
    openssl_privatekey:
      path: "{{ http_tls_key }}"
    when: with_kibana and with_nginx
    notify:
      - Enable and start nginx

  - name: Generate sensor public key
    openssl_publickey:
      path: "{{ http_tls_pub }}"
      privatekey_path: "{{ http_tls_key }}"
    when: with_kibana and with_nginx
    notify:
      - Enable and start nginx

  - name: Generate sensor CSR
    openssl_csr:
      path: "{{ http_tls_pub }}.csr"
      privatekey_path: "{{ http_tls_key }}"
      country_name: US
      state_or_province_name: MO
      locality_name: St. Louis
      organization_name: RockNSM
      organizational_unit_name: NSM Ninjas
      email_address: info@rocknsm.io
      common_name: "{{ rock_fqdn }}"
    when: with_kibana and with_nginx
    notify:
      - Enable and start nginx

  - name: Generate sensor certificate
    openssl_certificate:
      path: "{{ http_tls_crt }}"
      privatekey_path: "{{ http_tls_key }}"
      csr_path: "{{ http_tls_pub }}.csr"
      provider: selfsigned
    when: with_kibana and with_nginx
    notify:
      - Enable and start nginx

  - name: Combine sensor cert and key
    shell: >
      cat {{http_tls_key}} {{http_tls_crt}} > {{http_tls_combined}}
    args:
      creates: "{{ http_tls_combined }}"
    when: with_lighttpd
    notify:
      - Restart lighttpd

  - name: Generate DH parameters
    command: >
      openssl dhparam -out {{http_tls_dhparams}} 2048
    args:
      creates: "{{http_tls_dhparams}}"
    when: with_kibana and with_nginx
    notify:
      - Enable and start nginx

    ######################################################
    ############### Setup ROCKNSM Scripts ################
    ######################################################
  - name: Install rock start script
    copy:
      src: rock_start
      dest: /usr/local/bin/rock_start
      mode: 0700
      owner: root
      group: root

  - name: Install rock stop script
    copy:
      src: rock_stop
      dest: /usr/local/bin/rock_stop
      mode: 0700
      owner: root
      group: root

  - name: Install rock status script
    copy:
      src: rock_status
      dest: /usr/local/bin/rock_status
      mode: 0755
      owner: root
      group: root

  - name: Create rock script symlinks
    file:
      src: "/usr/local/bin/{{ item.src }}"
      dest: "/usr/sbin/{{ item.dest }}"
      force: yes
      state: link
    with_items:
      - { src: 'rock_start', dest: 'rock_start' }
      - { src: 'rock_stop', dest: 'rock_stop' }
      - { src: 'rock_status', dest: 'rock_status' }

  # Training mode / Service mode not needed for AF_PACKET
  ######################################################
  ############### ROCKNSM Customization ################
  ######################################################
  - name: Set ROCK NSM Version
    copy:
      content: "{{ rock_version }}"
      dest: /etc/rocknsm/rock-version
      mode: 0644
      owner: root
      group: root

  - name: Install ROCK NSM /etc/issue
    copy:
      src: etc-issue.in
      dest: /etc/issue.in
      mode: 0644
      owner: root
      group: root

  - name: NetworkManager ROCK NSM hook
    copy:
      src: nm-issue-update
      dest: /etc/NetworkManager/dispatcher.d/50-rocknsm-issue-update
      mode: 0755
      owner: root
      group: root

  #######################################################
  #####################  Handlers  ######################
  #######################################################
  handlers:
    - name: force sync time
      command: >
        chronyc -a 'burst 3/4'; sleep 5; chronyc -a makestep

    - name: configure monitor interfaces
      shell: >
        for intf in {{ rock_monifs | join(' ') }}; do
          /sbin/ifup ${intf};
        done

    - name: sshd restart
      service: name=sshd state=restarted

    - name: es maintenance
      command: /usr/local/bin/es_cleanup.sh

    - name: reload bro
      service: name=bro state="{{ 'started' if enable_bro else 'stopped' }}"

    - name: create kafka bro topic
      command: >
        /opt/kafka/bin/kafka-topics.sh
           --zookeeper 127.0.0.1:2181
           --create
           --replication-factor 1
           --topic bro-raw
           --partitions 1

    - name: create kafka suricata topic
      command: >
        /opt/kafka/bin/kafka-topics.sh
           --zookeeper 127.0.0.1:2181
           --create
           --replication-factor 1
           --topic suricata-raw
           --partitions 1

    - name: create kafka fsf topic
      command: >
        /opt/kafka/bin/kafka-topics.sh
           --zookeeper 127.0.0.1:2181
           --create
           --replication-factor 1
           --topic fsf-raw
           --partitions 1

    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: Restart Logstash
      systemd:
        name: logstash
        state: restarted

    - name: Restart Filebeat
      systemd:
        name: filebeat
        state: restarted

    - name: Enable and start nginx
      systemd:
        name: nginx
        state: "{{ 'started' if enable_nginx else 'stopped' }}"
        enabled: "{{ enable_nginx }}"
      when: with_nginx

    - name: Restart lighttpd
      service:
        name: lighttpd
        state: "{{ 'started' if enable_lighttpd else 'stopped' }}"
        enabled: "{{ enable_lighttpd }}"
      when: with_lighttpd


  environment:
   http_proxy:  "{{ http_proxy }}"
   https_proxy: "{{ https_proxy }}"
   HTTP_PROXY:  "{{ http_proxy }}"
   HTTPS_PROXY: "{{ https_proxy }}"
