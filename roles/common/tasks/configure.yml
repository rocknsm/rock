---
######################################################
################# Data Directory #####################
######################################################
###############
##### NOTE ####
###############
# You will want to remount this to your "good" storage after the build.
# This is just to make sure all the paths in the configs are proper.
###############
- name: Create RockNSM data directory
  file:
    path: "{{ rock_data_dir }}"
    mode: 0755
    owner: "{{ rock_data_user }}"
    group: "{{ rock_data_group }}"
    state: directory

- name: Create RockSNM conf directory
  file:
    path: "{{ rock_conf_dir }}"
    mode: 0755
    owner: root
    group: root
    state: directory

- name: Create RockNSM directory
  file:
    path: "{{ rocknsm_dir }}"
    mode: 0755
    owner: root
    group: root
    state: directory

- name: Create RockNSM cache dir
  file:
    path: "{{ rock_cache_dir }}"
    mode: 0755
    owner: root
    group: root
    state: directory
  when:
    - ('logstash' or 'kibana' or 'elasticsearch' in installed_services)
    - "['elasticsearch', 'logstash', 'kibana']|intersect(group_names)|count > 0"


- name: Download RockNSM elastic configs
  get_url:
    url: "{{ rock_dashboards_url }}"
    dest: "{{ rock_cache_dir }}/{{ rock_dashboards_filename }}"
    mode: 0644
  when:
    - rock_online_install
    - ('logstash' or 'kibana' or 'elasticsearch' in installed_services)
    - "['elasticsearch', 'logstash', 'kibana']|intersect(group_names)|count > 0"


- name: Extract RockNSM elastic configs
  unarchive:
    src: "{{ rock_cache_dir }}/{{ rock_dashboards_filename }}"
    dest: /opt/rocknsm
    owner: root
    group: root
    creates: "{{ rock_module_dir }}"
    remote_src: true
  when:
    - ('logstash' or 'kibana' or 'elasticsearch' in installed_services)
    - "['elasticsearch', 'logstash', 'kibana']|intersect(group_names)|count > 0"


- name: Disable IPv6 for all interfaces
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: 1
    sysctl_file: "{{ rock_sysctl_file }}"

- name: Disable IPv6 for default interfaces
  sysctl:
    name: net.ipv6.conf.default.disable_ipv6
    value: 1
    sysctl_file: "{{ rock_sysctl_file }}"

- name: Disable IPv6 in sshd
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: AddressFamily
    line: AddressFamily inet
  notify:
    - Restart sshd

- name: Add the inventory into /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
    state: present
  when: hostvars[item]['ansible_facts']['default_ipv4'] is defined
  loop: "{{ groups['all'] }}"

- name: Set system hostname
  hostname:
    name: "{{ inventory_hostname }}"

- name: Re-run Setup to populate changes
  setup:

- name: Setup EPEL repository
  yum_repository:
    name: epel
    description: EPEL YUM repo
    baseurl: "{{ epel_baseurl }}"
    gpgkey: "{{ epel_gpgurl }}"
    gpgcheck: true
  when: rock_online_install

- name: Manually trust CentOS GPG key
  rpm_key:
    state: present
    key: http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7
  when: rock_online_install

- name: Setup elastic repository
  yum_repository:
    name: elastic-6.x
    description: Elastic Stack repository for 6.x
    baseurl: "{{ elastic_baseurl }}"
    gpgkey: "{{ elastic_gpgurl }}"
    gpgcheck: false
  when: rock_online_install

- name: Configure RockNSM online repos
  yum_repository:
    file: rocknsm
    name: "{{ item.name }}"
    enabled: "{{ rock_online_install }}"
    description: "{{ item.name }}"
    baseurl: "{{ item.baseurl }}"
    repo_gpgcheck: 1
    gpgcheck: "{{ item.gpgcheck }}"
    gpgkey:
      - file:///etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-pkgcloud-2_3
      - file:///etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-2
    sslverify: 1
    sslcacert: /etc/pki/tls/certs/ca-bundle.crt
    metadata_expire: 300
    cost: 750
    state: present
  loop:
    - { name: "rocknsm_2_3", gpgcheck: true, baseurl: "{{ rocknsm_baseurl }}" }
    - { name: "rocknsm_2_3-source", gpgcheck: false, baseurl: "{{ rocknsm_srpm_baseurl }}" }

- name: Configure RockNSM online testing repos
  yum_repository:
    file: "rocknsm-testing"
    name: "rocknsm-testing"
    description: "RockNSM - Testing - $basearch"
    baseurl: "{{ rocknsm_testing_baseurl }}"
    skip_if_unavailable: "True"
    gpgcheck: 1
    gpgkey:
      - file:///etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-Testing
    repo_gpgcheck: 0
    enabled: "{{ (rock_online_install and rock_enable_testing) | bool }}"
    cost: 750
    state: present

- name: Setup local offline repo
  yum_repository:
    name: rocknsm-local
    description: ROCKNSM Local Repository
    baseurl: "{{ rocknsm_local_baseurl }}"
    gpgcheck: "{{ rock_offline_gpgcheck }}"
    gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-2
    repo_gpgcheck: "{{ rock_offline_gpgcheck }}"
    cost: 500
  when: not rock_disable_offline_repo | bool

- name: Install RockNSM GPG keys
  copy:
    src: "{{ item }}"
    dest: "/etc/pki/rpm-gpg/{{ item }}"
    mode: 0644
    owner: root
    group: root
  loop:
    - RPM-GPG-KEY-RockNSM-2
    - RPM-GPG-KEY-RockNSM-Testing
    - RPM-GPG-KEY-RockNSM-pkgcloud-2_3

- name: Trust RockNSM GPG keys for RPMs
  rpm_key:
    state: present
    key: "{{ item.path }}"
  loop:
    - repoid: "rocknsm_2_3"
      path: "/etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-2"
      test: "{{ rock_online_install }}"
    - repoid: "rocknsm_2_3"
      path: "/etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-pkgcloud-2_3"
      test: "{{ rock_online_install }}"
    - repoid: "rocknsm-testing"
      path: "/etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-Testing"
      test: "{{ rock_online_install }}"
    - repoid: "rocknsm-local"
      path: "/etc/pki/rpm-gpg/RPM-GPG-KEY-RockNSM-2"
      test: "{{ not rock_disable_offline_repo }}"
  register: registered_keys
  when: item.test | bool

- name: Trust RockNSM GPG keys in yum
  command: >
    yum -q makecache -y --disablerepo='*' --enablerepo='{{ item.item.repoid }}'
  args:
    warn: false
  loop: "{{ registered_keys.results }}"
  when: item.changed

- name: Configure default CentOS online repos
  ini_file:
    path: "{{ item.path }}"
    section: "{{ item.repo }}"
    option: "enabled"
    value: "{{ '1' if rock_online_install else '0' }}"
    state: "present"
  loop:
    - { path: "/etc/yum.repos.d/CentOS-Base.repo", repo: "base" }
    - { path: "/etc/yum.repos.d/CentOS-Base.repo", repo: "updates" }
    - { path: "/etc/yum.repos.d/CentOS-Base.repo", repo: "extras" }
  when: ansible_distribution == "CentOS"

# We need to make sure pyopenssl >= 0.15 is installed to support the following module
# https://docs.ansible.com/ansible/latest/modules/openssl_certificate_module.html#openssl-certificate-module
# The "base" repo only goes up to 0.13, so we need to exclude it for this task
- name: Install pyopenssl package
  yum:
    name: python2-pyOpenSSL
    state: installed
  when: "'docket' in group_names or 'stenographer' in group_names"

- name: Install core packages
  yum:
    name: "{{ rocknsm_package_list }}"
    state: installed

- name: Enable and start firewalld
  service:
    name: firewalld
    enabled: true
    state: started

# Use 'internal' zone for intra-ROCK communication
- name: Create internal firewall zone
  firewalld:
    state: present
    zone: internal
    permanent: true
  register: result

- name: Reload firewalld to load zone
  service:
    name: firewalld
    state: restarted
  when: result.changed

# Use 'work' zone for management network
- name: Create work firewall zone
  firewalld:
    state: present
    zone: work
    permanent: true
  register: result

- name: Reload firewalld to load zone
  service:
    name: firewalld
    state: restarted
  when: result.changed

- name: Configure firewall ports
  firewalld:
    port: "{{ item[1] }}"
    source: "{{ item[0] }}"
    zone: work
    permanent: true
    state: enabled
    immediate: true
  loop: "{{ rock_mgmt_nets | product(['22/tcp']) | list }}"

- name: Ensure cache directory exists
  file:
    dest: "{{ rock_cache_dir }}"
    state: directory
    mode: 0755
  when:
    - ('logstash' or 'kibana' or 'elasticsearch' in installed_services)
    - "['elasticsearch', 'logstash', 'kibana']|intersect(group_names)|count > 0"

- name: Install RockNSM control script
  template:
    src: rockctl.j2
    dest: /usr/local/bin/rockctl
    mode: 0755
    owner: root
    group: root

- name: Create RockNSM control script symlink
  file:
    src: "/usr/local/bin/rockctl"
    dest: "/usr/sbin/rockctl"
    force: true
    state: link

- name: Set RockNSM Version
  copy:
    content: "{{ rock_version }}"
    dest: "{{ rock_conf_dir }}/rock-version"
    mode: 0644
    owner: root
    group: root

- name: Install RockNSM /etc/issue
  copy:
    src: etc-issue.in
    dest: /etc/issue.in
    mode: 0644
    owner: root
    group: root

- name: Add NetworkManager RockNSM hook
  copy:
    src: nm-issue-update
    dest: /etc/NetworkManager/dispatcher.d/50-rocknsm-issue-update
    mode: 0755
    owner: root
    group: root
...
