#!/bin/bash

action=$1
rock_services | selectattr('name', 'equalto', 'elasticsearch') | map(attribute='installed')

enabled_services=({% for service in rock_services | intersect(group_names) %} {% if service.enabled %}"{{ service }}" {% endif %}{% endfor %})
installed_services=({% for service in rock_services | intersect(group_names) %} {% if service.installed %}"{{ service }}" {% endif %}{% endfor %})

function feature_enabled () {
  for service in "${enabled_services[@]}"; do
    [[ "$service" == "$1" ]] && return 0
  done
  return 1
}

function expand_services () {
  for service in "${enabled_services[@]}"; do
    if [[ "$service" = "stenographer" ]]; then
      for interface in $(find /etc/stenographer/ -maxdepth 1 -name "config.*" | awk -F. '{print $2}'); do
        installed_services+=("stenographer@${interface}")
        enabled_services+=("stenographer@${interface}")
      done
    else
      for extra_service in $(systemctl list-unit-files "$service*" | awk -v param="$service[-_@]" -F. 'match($1, param) { print $1 }'); do
        installed_services+=("$extra_service")
        enabled_services+=("$extra_service")
      done
    fi
  done
}

function usage() {
  cat <<EOF
Usage: $0 COMMAND

Manages all ROCK services on this host.

For multiple hosts use: rock {start|stop|restart|status}

For invdividual services use: systemctl {start|stop|status|reset-failed} <service>

Commands:
status              Report status for all ROCK services on this host
stop                Stop all ROCK services on this host
start               Start all ROCK services on this host
restart             Restart all ROCK services on this host
reset-failed        Reset failed status all ROCK services on this host
                    Useful for services like stenographer that start and exit
EOF
}

case $action in
  "stop")
    expand_services

    for service in "${installed_services[@]}"; do
      echo "${service^^}: stopping..."
      systemctl stop "${service}"
      # Lets also make sure the service is disabled
      if [[ $(systemctl is-enabled "${service}") == 'enabled' ]] && ! feature_enabled "$service"; then
        echo "${service^^} is set to disabled in RockNSM config but is currently enabled in systemctl."
        echo "Disabling ${service^^} in systemctl..."
        systemctl disable --quiet "${service}"
      fi
    done
    ;;
  "start")
    expand_services

    for service in "${enabled_services[@]}"; do
        echo "${service^^}: starting..."
        systemctl start "${service}"
        # Lets also make sure the service is enabled in systemctl
        if [[ $(systemctl is-enabled "${service}") == 'disabled' ]]; then
          echo "${service^^} is set to enabled in RockNSM config but is currently disabled in systemctl."
          echo "Enabling ${service^^} in systemctl..."
          systemctl enable "${service}"
        fi
    done
    ;;
    "restart")
    expand_services

      for service in "${enabled_services[@]}"; do
          echo "${service^^}: restarting..."
          systemctl restart "${service}"
          # Lets also make sure the service is enabled in systemctl
          if [[ $(systemctl is-enabled "${service}") == 'disabled' ]]; then
            echo "${service^^} is set to enabled in RockNSM config but is currently disabled in systemctl."
            echo "Enabling ${service^^} in systemctl..."
            systemctl enable "${service}"
          fi
      done
      ;;
  "status")
    expand_services

    for service in "${installed_services[@]}"; do
      echo "${service^^}":
      systemctl is-active --quiet "${service}"
      if [[ $? -eq 0 ]]; then
        prefix="[1;32m"
      else
        prefix="[1;31m"
      fi
      echo -e " \e${prefix}$(systemctl status "${service}" | grep Active) \e[0m"
    done
    ;;
  "reset-failed")
    expand_services

    for service in "${installed_services[@]}"; do
      echo "${service^^}: resetting status..."
      systemctl reset-failed "${service}"
    done
    ;;
  *)
    usage
esac

exit 0
