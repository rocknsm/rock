---
# tasks file for rocknsm.docket

# Install packages

# Ensure `stenographer` and `nginx` groups exists

# Configure docket app settings
- name: Ensure ansible_cache dir exists
  local_action: tempfile state=directory
  changed_when: false
  register: cachedir

- name: Set ansible_cache fact
  set_fact:
    ansible_cache: cachedir.path

# TODO: Not sure why this is needed here
- name: Ensure rock nsm conf dir exists
  file:
    path: "{{ rocknsm_conf_dir }}"
    state: directory
    owner: "{{ rocknsm_conf_user }}"
    group: "{{ rocknsm_conf_group }}"

- name: Ensure docket x509 user exists
  user:
    name: "{{ docket_x509_user }}"
    state: present
  when: inventory_hostname in groups['docket']

- name: Ensure docket x509 group exists
  group:
    name: "{{ docket_x509_group }}"
    system: true
    state: present
  when: inventory_hostname in groups['docket']

- name: Ensure docket x509 dir exists
  file:
    path: "{{ docket_x509_dir }}"
    state: directory
    mode: 0750
    owner: "{{ docket_x509_user }}"
    group: "{{ docket_x509_group }}"
  when: inventory_hostname in groups['docket']

# Generate/copy x509 client cert/keys and CA certs
# Use new openssl module in ansible 2.3
- name: Create docket private key
  openssl_privatekey:
    path: "{{docket_x509_key}}"
    size: 4096
  when: inventory_hostname in groups['docket']

- name: Set perms on private key
  file:
    path: "{{docket_x509_key}}"
    owner: "{{ docket_x509_user }}"
    group: "{{ docket_x509_group }}"
    mode: "0644"
  when: inventory_hostname in groups['docket']

- name: Check for certificate
  stat:
    path: "{{docket_x509_dir}}/docket-{{inventory_hostname_short}}_sensor-{{item}}_cert.pem"
  register: docket_cert
  changed_when: false
  loop: "{{ groups['stenographer'] }}"
  when: inventory_hostname in groups['docket']

- debug: var=docket_cert.results
  when: inventory_hostname in groups['docket']

- name: Create docket csr
  openssl_csr:
    path: "{{ docket_x509_key }}.csr"
    privatekey_path: "{{ docket_x509_key }}"
    commonName: "{{ docket_x509_cn }}"
    organizationName: "{{ docket_x509_o }}"
    countryName: "{{ docket_x509_c }}"
    keyUsage: digitalSignature
    extendedKeyUsage: clientAuth
  when:
    - inventory_hostname in groups['docket']
    - docket_cert|json_query('results[?stat.exists==`false`]')|length
  register: new_csr

- name: Fetch csr
  fetch:
    src: "{{docket_x509_key}}.csr"
    dest: "{{ ansible_cache }}/{{inventory_hostname_short}}.csr"
    flat: true
  when:
    - inventory_hostname in groups['docket']
    - not new_csr is skipped

- debug:
    msg: "{{ hostvars[item].docket_cert|json_query('results[?stat.exists==`false`]')|length }}"
  when:
    - inventory_hostname in groups['stenographer']
  loop: "{{ groups['docket'] }}"

- debug:
    var: hostvars[item].docket_cert|json_query('results[?item==inventory_hostname_short]')
  loop: "{{ groups['docket'] }}"
  when:
    - inventory_hostname in groups['stenographer']

- name: Push csr to stenographer hosts
  copy:
    src: "{{ansible_cache}}/{{hostvars[item].inventory_hostname_short}}.csr"
    dest: "{{steno_certs_dir}}/{{hostvars[item].inventory_hostname_short}}.csr"
  loop: "{{ groups['docket'] }}"
  when:
    - inventory_hostname in groups['stenographer']
    - not new_csr is skipped

- name: Sign certificate signing requests
  openssl_certificate:
    path: "{{steno_certs_dir}}/docket-{{hostvars[item].inventory_hostname_short}}_sensor-{{inventory_hostname_short}}_cert.pem"
    csr_path: "{{steno_certs_dir}}/{{hostvars[item].inventory_hostname_short}}.csr"
    ownca_privatekey_path: "{{steno_ca_key}}"
    ownca_path: "{{steno_ca_cert}}"
    provider: ownca
  loop: "{{ groups['docket'] }}"
  when:
    - inventory_hostname in groups['stenographer']
    - hostvars[item].docket_cert.results|map(attribute="stat.exists")|select("equalto",false)|list|length

- name: Pull certificates back
  fetch:
    src: "{{steno_certs_dir}}/docket-{{hostvars[item].inventory_hostname_short}}_sensor-{{inventory_hostname_short}}_cert.pem"
    dest: "{{ansible_cache}}/docket-{{hostvars[item].inventory_hostname_short}}_sensor-{{inventory_hostname_short}}_cert.pem"
    flat: true
  loop: "{{ groups['docket'] }}"
  when:
    - inventory_hostname in groups['stenographer']
    - hostvars[item].docket_cert.results|map(attribute="stat.exists")|select("equalto",false)|list|length

- name: Pull back ca certificates
  fetch:
    src: "{{steno_ca_cert}}"
    dest: "{{ansible_cache}}/{{inventory_hostname_short}}_ca_cert.pem"
    flat: true
  when:
    - inventory_hostname in groups['stenographer']
  changed_when: false

- name: Push certificates to docket hosts
  copy:
    src: "{{ansible_cache}}/docket-{{inventory_hostname_short}}_sensor-{{hostvars[item].inventory_hostname_short}}_cert.pem"
    dest: "{{docket_x509_dir}}/docket-{{inventory_hostname_short}}_sensor-{{hostvars[item].inventory_hostname_short}}_cert.pem"
    owner: "{{ docket_x509_user }}"
    group: "{{ docket_x509_group }}"
    mode: "0644"
  loop: "{{ groups['stenographer'] }}"
  when:
    - inventory_hostname in groups['docket']
    - docket_cert.results|map(attribute="stat.exists")|select("equalto",false)|list|length

- name: Push stenographer ca certs
  copy:
    src: "{{ansible_cache}}/{{hostvars[item].inventory_hostname_short}}_ca_cert.pem"
    dest: "{{docket_x509_dir}}/{{hostvars[item].inventory_hostname_short}}_ca_cert.pem"
    owner: "{{ docket_x509_user }}"
    group: "{{ docket_x509_group }}"
    mode: "0644"
  loop: "{{ groups['stenographer'] }}"
  when:
    - inventory_hostname in groups['docket']

- name: Cleanup {{ ansible_cache }} dir
  file:
    name: "{{ ansible_cache }}/"
    state: absent
  changed_when: false
