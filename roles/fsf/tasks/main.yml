---

- name: Install packages
  yum:
    name:
      - fsf
    state: present

- name: Create FSF data directory
  file:
    path: "{{ fsf_data_dir }}"
    mode: 0755
    owner: "{{ fsf_user }}"
    group: "{{ fsf_group }}"
    state: directory
    setype: var_log_t

- name: Create FSF archive directory
  file:
    path: "{{ fsf_archive_dir }}"
    mode: 0755
    owner: "{{ fsf_user }}"
    group: "{{ fsf_group }}"
    state: directory

- name: Configure logrotate for FSF logs
  template:
    src: templates/logrotate-fsf.j2
    dest: /etc/logrotate.d/fsf
    mode: 0644
    owner: root
    group: root

- name: Configure fsf-server
  template:
    src: templates/fsf-server-config.j2
    dest: /opt/fsf/fsf-server/conf/config.py
    owner: "{{ fsf_user }}"
    group: "{{ fsf_group }}"
    mode: 0644

- name: Configure fsf-client
  template:
    src: templates/fsf-client-config.j2
    dest: /opt/fsf/fsf-client/conf/config.py
    owner: "{{ fsf_user }}"
    group: "{{ fsf_group }}"
    mode: 0644

- name: Discover facts about data mount
  set_fact:
    rock_mounts:
      mount: "{{ item.mount }}"
      device: "{{ item.device }}"
      size_total: "{{ item.size_total }}"
  loop:
    "{{ ansible_mounts }}"
  when: (item.mount == default_mount and rock_mounts is not defined)

- name: Determining if quotas are enabled
  command: awk /prjquota/ /etc/fstab
  register: prjquota

- name: Create fsf quota project id
  getent:
    database: group
    split: ':'
    key: fsf
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Map fsf quota project id to name
  lineinfile:
    create: yes
    state: present
    insertafter: EOF
    path: /etc/projid
    line: "fsf:{{ getent_group.fsf[1] }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Define fsf quota project directories
  lineinfile:
    create: yes
    state: present
    insertafter: EOF
    path: /etc/projects
    line: "{{ getent_group.fsf[1] }}:{{ rock_mounts.mount }}/fsf"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: set fsf weight
  set_fact:
    fsf_weight: "{{ rock_services | selectattr('name', 'equalto', 'fsf') | map(attribute='quota_weight') | first }}"
  when: fsf_quota is not defined and (prjquota.stdout|length>0)

- name: set fsf quota if not user defined
  set_fact:
    fsf_quota: "{{ rock_mounts.size_total | int / xfs_quota_weight | int * fsf_weight | int}}"
  when: fsf_quota is not defined and (prjquota.stdout|length>0)

- name: set fsf project quota
  xfs_quota:
    type: project
    name: fsf
    bhard: "{{ fsf_quota }}"
    state: present
    mountpoint: "{{ rock_mounts.mount }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Enable and start FSF
  service:
    name: fsf
    state: "{{ 'started' if 'fsf' in enabled_services else 'stopped' }}"
    enabled: "{{ 'True' if 'fsf' in enabled_services else 'False' }}"

- name: Apply Logstash role
  include_role:
    name: logstash
    apply:
      delegate_to: "{{ host }}"
      vars:
        logstash_configs:
          - { src: 'ls-input-fsf.j2', dest: '100-input-fsf.conf' }
          - { src: 'ls-filter-fsf.j2', dest: '500-filter-fsf.conf' }
          - { src: 'ls-output-fsf.j2', dest: '999-output-fsf.conf' }
  loop:
    "{{ groups['logstash'] }}"
  loop_control:
    loop_var: host
