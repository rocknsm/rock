---
- name: Install packages
  yum:
    name:
      - kafka
      - kafkacat
      - java-11-openjdk-headless
    state: present

- name: Create kafka data directory
  file:
    path: "{{ kafka_data_dir }}"
    mode: 0755
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    state: directory

- name: Set kafka retention
  lineinfile:
    dest: "{{ kafka_config_path }}"
    regexp: "log.retention.hours="
    line: "log.retention.hours={{ kafka_retention }}"
    state: present

- name: Set kafka data directory
  lineinfile:
    dest: "{{ kafka_config_path }}"
    regexp: "log.dirs="
    line: "log.dirs={{ kafka_data_dir }}"

- name: Set kafka broker.id to automatic
  lineinfile:
    dest: "{{ kafka_config_path }}"
    regexp: "broker.id="
    line: "broker.id=-1"

- name: Set kafka zookeeper.connect
  lineinfile:
    dest: "{{ kafka_config_path }}"
    regexp: "zookeeper.connect="
    line: "zookeeper.connect={{ kafka_zookeeper_host }}:{{ kafka_zookeeper_port }}{{ kafka_zookeeper_chroot }}"

- name: Discover facts about data mount
  set_fact:
    rock_mounts:
      mount: "{{ item.mount }}"
      device: "{{ item.device }}"
      size_total: "{{ item.size_total }}"
  loop:
    "{{ ansible_mounts }}"
  when: (default_mount is defined and item.mount == default_mount and rock_mounts is not defined)

- name: Determining if quotas are enabled
  command: >
    awk -v path="{{ default_mount }}"
      '$2 ~ path && $4 ~ /p(rj)?quota/ ' /etc/fstab
  register: prjquota
  changed_when: false

- name: Create kafka quota project id
  getent:
    database: group
    split: ':'
    key: kafka
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Map kafka quota project id to name
  lineinfile:
    create: true
    state: present
    insertafter: EOF
    path: /etc/projid
    line: "kafka:{{ getent_group.kafka[1] }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Define kafka quota project directories
  lineinfile:
    create: true
    state: present
    insertafter: EOF
    path: /etc/projects
    line: "{{ getent_group.kafka[1] }}:{{ kafka_data_dir }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: set kafka weight
  set_fact:
    kafka_weight: "{{ rock_services | selectattr('name', 'equalto', 'kafka') | map(attribute='quota_weight') | first }}"
  when: kafka_quota is not defined and (prjquota.stdout|length>0)

- name: set kafka quota if not user defined
  set_fact:
    kafka_quota: "{{ rock_mounts.size_total | int / xfs_quota_weight | int * kafka_weight | int }}"
  when: kafka_quota is not defined and (prjquota.stdout|length>0)

- name: set kafka project quota
  xfs_quota:
    type: project
    name: kafka
    bhard: "{{ kafka_quota }}"
    state: present
    mountpoint: "{{ rock_mounts.mount }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Create wait-for-zookeeper sidecar
  copy:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - src: wait-for-zookeeper.py
      dest: /usr/local/sbin/wait-for-zookeeper.py
      mode: '0755'
    - src: wait-for-zookeeper.service
      dest: /etc/systemd/system/wait-for-zookeeper.service
      mode: '0644'
  register: wait_for_zk_created

- name: Create environment file for zookeeper sidecar
  copy:
    dest: /etc/sysconfig/wait-for-zookeeper
    content: |
      ZOOKEEPER_HOST={{ kafka_zookeeper_host }}
      ZOOKEEPER_PORT={{ kafka_zookeeper_port }}
    mode: '0644'
    owner: root
    group: root

- name: Create kafka service overrides dir
  file:
    state: directory
    path: /etc/systemd/system/kafka.service.d/
    recurse: true
    owner: root
    group: root
    mode: '0755'

- name: Insert Kafka override to wait for Zookeeper
  copy:
    dest: /etc/systemd/system/kafka.service.d/override.conf
    content: |
      # /etc/systemd/system/kafka.service.d/override.conf
      [Unit]
      After=wait-for-zookeeper.service
      Requires=wait-for-zookeeper.service
    mode: '0644'
    owner: root
    group: root
  register: kafka_override_created

- name: Enable and start kafka
  service:
    name: "{{ item }}"
    daemon-reload: "{{ kafka_override_created.changed or wait_for_zk_created.changed }}"
    state: "{{ 'started' if local_services | selectattr('name', 'equalto', 'kafka') | map(attribute='enabled') | first | bool else 'stopped' }}"
    enabled: "{{ local_services | selectattr('name', 'equalto', 'kafka') | map(attribute='enabled') | first | bool }}"
  with_items:
    - wait-for-zookeeper
    - kafka

- name: Configure firewall ports
  firewalld:
    port: "{{ item }}/tcp"
    permanent: true
    state: enabled
    immediate: true
    zone: work
  loop:
    - 9092
  when: groups['kafka'] | difference(groups['logstash']) | count > 0
...
