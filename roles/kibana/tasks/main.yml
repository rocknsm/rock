---

- name: Install packages
  yum:
    name: kibana
    state: present

- name: Update kibana config
  template:
    src: kibana.yml.j2
    dest: /etc/kibana/kibana.yml
  notify: Restart kibana

- name: Enable and start kibana
  service:
    name: kibana
    enabled: "{{ local_services | selectattr('name', 'equalto', 'kibana') | map(attribute='enabled') | first | bool }}"

- name: Flush handlers
  meta: flush_handlers

- name: "Wait for Kibana to be available"
  uri:
    url: "{{ kibana_url }}/api/kibana/settings"
    status_code: 200
    return_content: true
  register: result
  until: result.status == 200
  retries: 60
  delay: 1

- name: Store Kibana settings
  set_fact:
    kbn_settings: "{{ result.json.settings }}"

- name: Blanket install/update kibana saved objects
  command: ./import-saved-items.sh "{{ kibana_url }}"
  args:
    chdir: "{{ rock_module_dir }}/ecs-configuration/kibana"
  changed_when: false
  tags:
    - saved_objects
    # TODO: Fix this ^^

- name: Configure kibana templates
  uri:
    method: PUT
    url: "{{ es_url }}/_template/kibana-config"
    body: >
      { "order" : 0, "template" : ".kibana",
        "settings" :
          { "index.number_of_replicas" : "0",
            "index.number_of_shards" : "1" },
        "mappings" : { }, "aliases" : { } }
    body_format: json
    status_code: 200,201

- name: Set Kibana dark mode for the default space
  uri:
    method: POST
    url: "{{ kibana_url }}/api/kibana/settings"
    body: >
      {"changes": {
         "theme:darkMode": true
        }
      }
    headers:
      kbn-xsrf: true
    body_format: json
    status_code: 200,201
  when: "'theme:darkMode' not in kbn_settings or not (kbn_settings['theme:darkMode']|bool)"

- name: Set Kibana to store data in session storage
  uri:
    method: POST
    url: "{{ kibana_url }}/api/kibana/settings"
    body: >
      {"changes": {
         "state:storeInSessionStorage": true
        }
      }
    headers:
      kbn-xsrf: true
    body_format: json
    status_code: 200,201
  when: "'state:storeInSessionStorage' not in kbn_settings or not (kbn_settings['state:storeInSessionStorage']|bool)"

- name: Set fact for list of SIEM index patterns
  set_fact:
    siem_indices: "{{ kbn_settings['siem:defaultIndex']['userValue'] | default(['auditbeat-*', 'filebeat-*', 'packetbeat-*', 'winlogbeat-*']) }}"

- name: Configure SIEM to read ecs-* index pattern
  uri:
    method: POST
    url: "{{ kibana_url }}/api/kibana/settings"
    body: >
      {"changes": {
         "siem:defaultIndex": {{ siem_indices | union(['ecs-*']) }}
        }
      }
    headers:
      kbn-xsrf: true
    body_format: json
    status_code: 200,201
  when: "'siem:defaultIndex' not in kbn_settings or 'ecs-*' not in kbn_settings['siem:defaultIndex']['userValue']"

- name: Add the kibanapw shell function
  copy:
    src: profile.d-kibanapw.sh
    dest: /etc/profile.d/kibanapw.sh
    mode: 0644
    owner: root
    group: root

- name: Download RockNSM elastic configs
  get_url:
    url: "{{ rock_dashboards_url }}"
    dest: "{{ rock_cache_dir }}/{{ rock_dashboards_filename }}"
    mode: 0644
  when:
    rock_online_install and (
      rock_services | selectattr('name', 'equalto', 'elasticsearch') | map(attribute='installed') or
      rock_services | selectattr('name', 'equalto', 'logstash') | map(attribute='installed')
    )

- name: Extract RockNSM elastic configs
  unarchive:
    src: "{{ rock_cache_dir }}/{{ rock_dashboards_filename }}"
    dest: /opt/rocknsm
    owner: root
    group: root
    creates: "{{ rock_module_dir }}"
    remote_src: true
  when:
    rock_services | selectattr('name', 'equalto', 'elasticsearch') | map(attribute='installed') or
    rock_services | selectattr('name', 'equalto', 'logstash') | map(attribute='installed')
