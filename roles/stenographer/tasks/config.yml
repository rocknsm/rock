---
#######################################################
################# Config Stenographer #################
#######################################################

- name: Set stenographer config
  template:
    src: stenographer-config.j2
    dest: "/etc/stenographer/config.{{ item.1 }}"
  with_indexed_items: "{{ stenographer_monitor_interfaces }}"
  notify: Restart stenographer per interface

- name: Create stenographer directories
  file:
    path: "{{ stenographer_data_dir }}/{{ item[0] }}/{{ item[1] }}"
    mode: 0755
    owner: "{{ stenographer_user }}"
    group: "{{ stenographer_group }}"
    state: directory
  with_nested:
    - "{{ stenographer_monitor_interfaces }}"
    - [ 'index', 'packets' ]

- name: Install stenographer service files
  copy:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    mode: 0644
    owner: root
    group: root
  loop:
    - stenographer.service
    - stenographer@.service

- name: Generate stenographer keys
  command: >
    /usr/bin/stenokeys.sh {{ stenographer_user }} {{ stenographer_group }}
  environment:
    STENOGRAPHER_CONFIG: "/etc/stenographer/config.{{ stenographer_monitor_interfaces[0] }}"
  args:
    creates: /etc/stenographer/certs/client_key.pem

- name: Discover facts about data mount
  set_fact:
    rock_mounts:
      mount: "{{ item.mount }}"
      device: "{{ item.device }}"
      size_total: "{{ item.size_total }}"
  loop:
    "{{ ansible_mounts }}"
  when: (item.mount == default_mount and rock_mounts is not defined)

- name: Determining if quotas are enabled
  command: awk /prjquota/ /etc/fstab
  register: prjquota

- name: Create stenographer quota project id
  getent:
    database: group
    split: ':'
    key: stenographer
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Map stenographer quota project id to name
  lineinfile:
    create: yes
    state: present
    insertafter: EOF
    path: /etc/projid
    line: "stenographer:{{ getent_group.stenographer[1] }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Define stenographer quota project directories
  lineinfile:
    create: yes
    state: present
    insertafter: EOF
    path: /etc/projects
    line: "{{ getent_group.stenographer[1] }}:{{ rock_mounts.mount }}/stenographer"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: set stenographer weight
  set_fact:
    stenographer_weight: "{{ rock_services | selectattr('name', 'equalto', 'stenographer') | map(attribute='quota_weight') | first }}"
  when: stenographer_quota is not defined and (prjquota.stdout|length>0)

- name: set stenographer quota if not user defined
  set_fact:
    stenographer_quota: "{{ rock_mounts.size_total | int / xfs_quota_weight | int * stenographer_weight | int}}"
  when: stenographer_quota is not defined and (prjquota.stdout|length>0)

- name: set stenographer project quota
  xfs_quota:
    type: project
    name: stenographer
    bhard: "{{ stenographer_quota }}"
    state: present
    mountpoint: "{{ rock_mounts.mount }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Configure stenographer service
  service:
    name: stenographer
    enabled: "{{ 'True' if 'stenographer' in enabled_services else 'False' }}"
  notify: Start stenographer service

- name: Configure stenographer per interface
  service:
    name: "stenographer@{{ item }}"
    enabled: "{{ 'True' if 'stenographer' in enabled_services else 'False' }}"
  loop: "{{ stenographer_monitor_interfaces }}"
  notify: Start stenographer per interface

- name: Configure firewall ports
  firewalld:
    port: "{{ 1234 + index }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  loop: "{{ stenographer_monitor_interfaces }}"
  loop_control:
    index_var: index
  when: groups['stenographer'] | difference(groups['docket']) | count > 0
...
