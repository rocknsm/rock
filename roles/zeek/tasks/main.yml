---
# tasks file for zeek

# Prefer to move this list to default vars
- name: Install packages
  yum:
    name:
      - zeek
      - zeek-aux
      - zeekctl
      - zeek-plugin-kafka
      - zeek-plugin-af_packet
      - zeek-plugin-communityid
      - zeek-plugin-gquic
    state: installed

- name: Set monitor interface config
  template:
    src: templates/ifcfg-monif.j2
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ item }}
    mode: 0644
    owner: root
    group: root
    force: true
  loop: "{{ rock_monifs }}"

- name: Configure local ifup script
  template:
    src: templates/ifup-local.j2
    dest: /sbin/ifup-local
    mode: 0755
    owner: root
    group: root
    force: true
  notify: Configure monitor interfaces

- name: Configure GeoIP Update
  copy:
    src: GeoIP.conf
    dest: /etc/GeoIP.conf

# There's an issue w/ geoipupdate when env is empty
- name: Update GeoIP - Skipping due to bug
  shell: >
    if [ "x$HTTP_PROXY" == "x" ]; then
        unset HTTP_PROXY;
    fi
    if [ "x$http_proxy" == "x" ]; then
        unset http_proxy;
    fi
    if [ "x$HTTPS_PROXY" == "x" ]; then
        unset HTTPS_PROXY;
    fi
    if [ "x$https_proxy" == "x" ]; then
        unset https_proxy;
    fi
    /usr/bin/geoipupdate
  args:
    creates: /usr/share/GeoIP/GeoLiteASNum.dat
  register: result
  failed_when: (result.rc != 0) and (result.rc != 1)
  when: false
  tags:
    - molecule-idempotence-notest

- name: Create GeoIP symlinks
  file:
    src: "/usr/share/GeoIP/{{ item.src }}"
    dest: "/usr/share/GeoIP/{{ item.dest }}"
    force: true
    state: link
  loop:
    - { src: 'GeoLiteCity.dat', dest: 'GeoIPCity.dat' }
    - { src: 'GeoLiteCountry.dat', dest: 'GeoIPCountry.dat' }
    - { src: 'GeoLiteASNum.dat', dest: 'GeoIPASNum.dat' }
    - { src: 'GeoLiteCityv6.dat', dest: 'GeoIPCityv6.dat' }

- name: Create zeek group
  group:
    name: "{{ zeek_group }}"
    state: present
    system: true

- name: Create zeek user
  user:
    name: "{{ zeek_user }}"
    comment: "zeek service account"
    createhome: false
    group: "{{ zeek_group }}"
    home: /var/spool/zeek
    shell: /sbin/nologin
    system: true
    state: present

- name: Create zeek directories
  file:
    path: "{{ item }}"
    mode: 0755
    owner: "{{ zeek_user }}"
    group: "{{ zeek_group }}"
    state: directory
    setype: var_log_t
  loop:
    - "{{ zeek_data_dir }}"
    - "{{ zeek_data_dir }}/logs"
    - "{{ zeek_data_dir }}/spool"

- name: Create /opt/zeek for wandering users
  file:
    dest: "/opt/zeek"
    state: directory

- name: Create note to wandering users
  copy:
    dest: "/opt/zeek/README.md"
    content: |
      Hey! Where's my Bro?
      =========================
      RockNSM has aligned the Bro package to be inline with Fedora packaging
      guidelines in an effort to push the package upstream for maintenance.
      Fedora and EPEL have a great community and we believe others can benefit
      from our hard work.
      Here's where you can find your stuff:
      Bro configuration files
      -----------------------
      /opt/zeek/etc -> /etc/zeek
      Bro site scripts
      -----------------------
      /opt/zeek/share/zeek/site -> /usr/share/zeek/site
      Bro logs and spool dirs (same as previous ROCK iterations)
      -----------------------
      /opt/zeek/logs -> /data/zeek/logs
      /opt/zeek/spool -> /data/zeek/spool

- name: Create zeek configs
  template:
    src: "{{ item }}.j2"
    dest: "{{ zeek_sysconfig_dir }}/{{ item }}"
    mode: 0644
    owner: root
    group: root
  notify: Reload zeek
  loop:
    - node.cfg
    - zeekctl.cfg
    - networks.cfg

- name: Add zeek custom scripts directory
  file:
    path: "{{ zeek_site_dir }}/scripts"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: Set permissions on zeekctl scripts
  file:
    path: "{{ zeek_prefix }}/share/zeekctl/scripts"
    owner: "{{ zeek_user }}"
    group: "{{ zeek_user }}"
    mode: 0755
    state: directory

- name: Add README to scripts
  copy:
    src: zeek-scripts-readme.txt
    dest: "{{ zeek_site_dir }}/scripts/README.txt"
    mode: 0644
    owner: root
    group: root

- name: Checkout ROCK zeek scripts
  git:
    repo: "{{ zeek_rockscripts_repo }}"
    dest: "{{ zeek_site_dir }}/scripts/rock"
    version: "{{ zeek_rockscripts_branch }}"
  when: rock_online_install

- name: Deploy offline ROCK zeek scripts
  unarchive:
    src: "{{ rock_cache_dir }}/{{ zeek_rockscripts_filename }}"
    dest: "{{ zeek_site_dir }}/scripts/"
    owner: root
    group: root
    creates: "{{ zeek_site_dir }}/scripts/rock-scripts-{{ zeek_rockscripts_branch | replace ('/', '-') }}"
    remote_src: true
  when: not rock_online_install | bool

- name: Symlink offline ROCK zeek scripts
  file:
    src: "{{ zeek_site_dir }}/scripts/rock-scripts-{{ zeek_rockscripts_branch | replace ('/', '-') }}"
    dest: "{{ zeek_site_dir }}/scripts/rock"
    state: link
    force: true
  when: not rock_online_install | bool

- name: Update owner for ROCK zeek scripts
  file:
    path: "{{ zeek_site_dir }}/scripts/rock"
    owner: "{{ zeek_user }}"
    group: "{{ zeek_group }}"
    state: directory
    recurse: true
    follow: true
  tags:
    - zeek_scripts
    - molecule-idempotence-notest

- name: Add ROCK scripts to local.zeek
  lineinfile:
    dest: "{{ zeek_site_dir }}/local.zeek"
    line: "@load scripts/rock # ROCK NSM customizations"
    state: present

- name: Enable zeek kafka output to local.zeek
  lineinfile:
    dest: "{{ zeek_site_dir }}/local.zeek"
    line: "@load scripts/rock/plugins/kafka"
    state: present
  when: "rock_services | selectattr('name', 'equalto', 'kafka') | map(attribute='enabled')"

- name: Add zeek aliases
  copy:
    src: profile.d-zeek.sh
    dest: /etc/profile.d/zeek.sh
    mode: 0644
    owner: root
    group: root

- name: Add zeekctl wrapper for admin use
  copy:
    src: zeekctl.sh
    dest: /usr/sbin/zeekctl
    mode: 0754
    owner: root
    group: root

- name: Set zeek capabilities
  capabilities:
    path: /usr/bin/zeek
    capability: "{{ item }}"
    state: present
  loop:
    - "cap_net_raw+eip"
    - "cap_net_admin+eip"

- name: Set capstats capabilities
  capabilities:
    path: /usr/bin/capstats
    capability: "{{ item }}"
    state: present
  loop:
    - "cap_net_raw+eip"
    - "cap_net_admin+eip"

- name: Set zeekctl cron
  cron:
    name: "zeekctl maintenance"
    minute: "*/5"
    cron_file: rocknsm_zeekctl
    user: "{{ zeek_user }}"
    job: "/usr/bin/zeekctl cron >/dev/null 2>&1"

- name: Initialize zeek scripts for workers
  command: /usr/bin/zeekctl install
  args:
    creates: "{{ zeek_data_dir }}/spool/zeekctl-config.sh"
  become: true
  become_user: zeek

- name: Check status of interfaces
  command: >
    /usr/sbin/ip -oneline link show dev {{ item }}
  register: iplink
  changed_when: false
  loop: "{{ rock_monifs }}"

- name: Bring up interfaces
  command: >
    /usr/sbin/ip -oneline link set dev {{ item.stdout.split(':')[1] | trim }} up
  when: item.stdout is search("state DOWN")
  loop: "{{ iplink.results }}"

- name: Discover facts about data mount
  set_fact:
    rock_mounts:
      mount: "{{ item.mount }}"
      device: "{{ item.device }}"
      size_total: "{{ item.size_total }}"
  loop:
    "{{ ansible_mounts }}"
  when: (default_mount is defined and item.mount == default_mount and rock_mounts is not defined)

- name: Determining if quotas are enabled
  command: >
    awk -v path="{{ default_mount }}"
      '$2 ~ path && $4 ~ /p(rj)?quota/ ' /etc/fstab
  register: prjquota
  changed_when: false

- name: Create zeek quota project id
  getent:
    database: group
    split: ':'
    key: zeek
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Map zeek quota project id to name
  lineinfile:
    create: true
    state: present
    insertafter: EOF
    path: /etc/projid
    line: "zeek:{{ getent_group.zeek[1] }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Define zeek quota project directories
  lineinfile:
    create: true
    state: present
    insertafter: EOF
    path: /etc/projects
    line: "{{ getent_group.zeek[1] }}:{{ zeek_data_dir }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: set zeek weight
  set_fact:
    zeek_weight: "{{ rock_services | selectattr('name', 'equalto', 'zeek') | map(attribute='quota_weight') | first }}"
  when: zeek_quota is not defined and (prjquota.stdout|length>0)

- name: set zeek quota if not user defined
  set_fact:
    zeek_quota: "{{ rock_mounts.size_total | int / xfs_quota_weight | int * zeek_weight | int }}"
  when: zeek_quota is not defined and (prjquota.stdout|length>0)

- name: set zeek project quota
  xfs_quota:
    type: project
    name: zeek
    bhard: "{{ zeek_quota }}"
    state: present
    mountpoint: "{{ rock_mounts.mount }}"
  when: rock_mounts is defined and (prjquota.stdout|length>0)

- name: Apply Logstash role
  include_role:
    name: logstash
    apply:
      delegate_to: "{{ host }}"
      vars:
        logstash_configs:
          - { src: 'ls-input-zeek.j2', dest: 'logstash-100-input-kafka-zeek.conf' }
  loop:
    "{{ groups['logstash'] }}"
  loop_control:
    loop_var: host
